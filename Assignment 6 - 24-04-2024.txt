xquery version "1.0-ml";

(: Cross-Linkage between ASNID of the collection "ASNID" and ASNID of the collection "ASNDetials" :)

for $docs in cts:uris((),(),cts:collection-query("ASNID"))
return element result{
               element ASNID{cts:search(//ASNID,cts:document-query($docs))/text()},   
               cts:search(doc(),
               cts:and-query((
               cts:path-range-query("/root/asnDetails/ASNID", "=", cts:search(//ASNID,cts:document-query($docs))),
               cts:collection-query("ASNDetails")
               )))
}
,
(: Cross-Linkage between sender of the collection "ASNID" and sender of the collection "ASNDetials" :)

for $docs in cts:uris((),(),cts:collection-query("ASNID"))
return element result{
               element Sender{cts:search(//sender,cts:document-query($docs))/text()},
               cts:search(doc(),
               cts:and-query((
               cts:path-range-query("/root/asnDetails/sender", "=", cts:search(//sender,cts:document-query($docs))),
               cts:collection-query("ASNDetails")
               )))
}
,
(: To Print the URI's :)

for $docs in cts:uris((),(),cts:collection-query("ASNID"))
return element result{
               element ASNID_Collection{$docs},
               element ASNDetials_Colletction{
               for $uris in cts:uris((),(),
               cts:and-query((
               cts:path-range-query("/root/asnDetails/sender", "=", cts:search(//sender,cts:document-query($docs))),
               cts:collection-query("ASNDetails")
               )))
               return element uri{$uris}}
}
,
(: Cross-Linkage between receiver of the collection "ASNID" and receiver of the collection "ASNDetials" :)

for $docs in cts:uris((),(),cts:collection-query("ASNID"))
let $receiver := xs:string(cts:search(//receiver,cts:document-query($docs)))
return element result{
               element receiver{$receiver},
               cts:search(doc(),
               cts:and-query((
               cts:path-range-query("/root/asnDetails/receiver", "=", $receiver),
               cts:collection-query("ASNDetails")
               )))
}
xquery version "1.0-ml";
(:"2 elements" Cross-Linkage between "sender & ASN" of the collection "ASNID" and "sender & ASN" of the collection "ASNDetials" :)

for $docs in cts:uris((),(),cts:collection-query("ASNID"))
return element result{
               element Sender{cts:search(//ASNID,cts:document-query($docs))/text(), " - ", cts:search(//sender,cts:document-query($docs))/text()},
               cts:search(doc(),
               cts:and-query((
                 cts:and-query((
                      cts:path-range-query("/root/asnDetails/sender", "=", cts:search(//sender,cts:document-query($docs))),
                      cts:path-range-query("/root/asnDetails/ASNID", "=", cts:search(//ASNID,cts:document-query($docs)))
                  )),
                 cts:collection-query("ASNDetails")
               )))
}

(: To Print the URI's for 2 elements corss-linkage :)
for $docs in cts:uris((),(),cts:collection-query("ASNID"))
return element result{
               element Sender{$docs},
               cts:uris((),(),
               cts:and-query((
                 cts:and-query((
                      cts:path-range-query("/root/asnDetails/sender", "=", cts:search(//sender,cts:document-query($docs))),
                      cts:path-range-query("/root/asnDetails/ASNID", "=", cts:search(//ASNID,cts:document-query($docs)))
                  )),
                 cts:collection-query("ASNDetails")
               )))
}

(: Without the use of FLOWR Expression :)
cts:search(doc(),
               cts:and-query((
                 cts:and-query((
                      cts:path-range-query("/root/asnDetails/sender", "=", cts:search(//sender,cts:document-query("ASN002"))),
                      cts:path-range-query("/root/asnDetails/ASNID", "=", cts:search(//ASNID,cts:document-query("ASN002")))
                  )),
                 cts:collection-query("ASNDetails")
               )))