<export><workspace name="Workspace 3"><query name="Query 1" focus="false" listorder="1" taborder="1" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">
(: forest :)
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";
let $config := admin:get-configuration()
let $config := admin:forest-create(
  $config, 
  "practice_forest",
  xdmp:host(), 
  ())
return admin:save-configuration($config)

; (: remember, semi colon is the transaction separator and forces a commit.  necessary so the next step can see what was done in the prior step :)

(: database :)
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";
let $config := admin:get-configuration()
let $config := admin:database-create(
  $config,
  "practice",
  xdmp:database("Security"),
  xdmp:database("Schemas"))
return admin:save-configuration($config)

;

(: attach forest to database :)
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";
let $config := admin:get-configuration()
let $config := admin:database-attach-forest(
  $config,
  xdmp:database("practice"), 
  xdmp:forest("practice_forest"))
return admin:save-configuration($config)

;

(: application server :)
xquery version "1.0-ml";
import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, "Default")
let $server := admin:http-server-create(
  $config, 
  $groupid,
  "8042-practice",
  "C:\mls-projects\practice",
  8042,
  0,
  admin:database-get-id($config, "practice"))
return admin:save-configuration($server)
</query><query name="Query 2" focus="false" listorder="2" taborder="2" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";

(: Load Documents :)
xdmp:eval('for $d in xdmp:filesystem-directory("C:\mls-projects\functions-practice")//dir:entry
return xdmp:document-load($d//dir:pathname, 
  &lt;options xmlns="xdmp:document-load"&gt;
    &lt;uri&gt;{fn:string($d//dir:filename)}&lt;/uri&gt;
  &lt;/options&gt;)',  (),
		  &lt;options xmlns="xdmp:eval"&gt;
		    &lt;database&gt;{xdmp:database("practice")}&lt;/database&gt;
		  &lt;/options&gt;)</query><query name="Query 3" focus="false" listorder="3" taborder="3" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
declare namespace pr="http://marklogic.com/MLU/top-songs"; 

cts:search(/pr:top-song,"Angel")</query><query name="Query 4" focus="false" listorder="4" taborder="4" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
declare namespace pr="http://marklogic.com/MLU/top-songs"; 


for $i in cts:values(cts:element-reference(xs:QName("pr:title")))
return $i</query><query name="Query 5" focus="false" listorder="5" taborder="5" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
declare namespace pr="http://marklogic.com/MLU/top-songs"; 


for $i in cts:values(cts:element-reference(xs:QName("pr:artist")))
return $i 

</query><query name="Query 6" focus="false" listorder="6" taborder="6" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
declare namespace pr="http://marklogic.com/MLU/top-songs"; 

(: let $values := cts:values(cts:element-reference(xs:QName("pr:artist")))
for $value in $values
let $filtered-values := where cts:value-match("*A*",$value)
return $filtered-values :)

cts:value-match(cts:element-reference(xs:QName("pr:artist")), "*A*") 


</query><query name="Query 7" focus="false" listorder="7" taborder="7" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
declare namespace pr="http://marklogic.com/MLU/top-songs"; 

(: cts:path-range-query("/pr:top-song/pr:lengths/pr:length","&gt;=","1") 

cts:search(doc(),cts:path-range-query(/pr:top-song/pr:title,"&gt;="),"filtered"):)

cts:path-range-query(/pr:top-song/pr:title,"=","Ace of Base")

</query><query name="Query 8" focus="false" listorder="8" taborder="8" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
declare namespace pr="http://marklogic.com/MLU/top-songs"; 

let $i := cts:search(/pr:top-song/pr:descr, cts:document-query(("Aaliyah+Try-Again.xml",	"ABBA+Dancing-Queen.xml")))
return $i/string()</query><query name="Query 9" focus="false" listorder="9" taborder="9" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
  
cts:uri-match("*50*.xml")

collection -&gt; Books
Elements ---&gt; BookName
              Pages
              BookType
              
              (:&lt;tXML&gt;
                &lt;Books&gt;
                   &lt;BookName&gt;&lt;/BookName&gt;
                   &lt;Pages&gt;&lt;/Pages&gt;
                   &lt;BookType&gt;&lt;/BookType&gt;
                &lt;/Books&gt;
              &lt;tXML&gt;  :)</query><query name="Query 10" focus="false" listorder="10" taborder="10" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
              
xdmp:document-insert('/Books/Book7',
&lt;tXML&gt;
&lt;Books&gt;
&lt;BookName&gt;Fundamentals of JavaScript&lt;/BookName&gt;
&lt;Pages&gt;489&lt;/Pages&gt;
&lt;BookType&gt;Programming&lt;/BookType&gt;
&lt;/Books&gt;
&lt;/tXML&gt;,
&lt;options xmlns="xdmp:document-insert"&gt;
  &lt;collections&gt;
    &lt;collection&gt;Books&lt;/collection&gt;
  &lt;/collections&gt;
&lt;/options&gt;
)</query><query name="Query 11" focus="false" listorder="11" taborder="11" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";

for $i in collection("Books")
return $i/tXML/string()
</query><query name="Query 12" focus="false" listorder="12" taborder="12" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
cts:search(doc(),cts:path-range-query("/tXML/Books/Pages","&gt;=","500"),"filtered")</query><query name="Query 13" focus="false" listorder="13" taborder="13" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";

cts:search(//Pages, cts:collection-query("Books"))</query><query name="Query 14" focus="true" listorder="14" taborder="14" active="true" database="9328155861343718221" server="4624739403890708669" database-name="practice" server-name="App-Services" mode="xquery" optimize="1">xquery version "1.0-ml";
cts:search(fn:doc()/tXML,"of")</query></workspace></export>
